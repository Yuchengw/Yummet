This document is for platform code.
The whole platform is divided to packages:

May 1st Notes:
1. EntityObjectWithDbObject: Add one mapping class for the entity class and the database class
2. Cache save will only save the the entity object instead of including the database object. How to make it happen:
1) DB object is not one child property of the entity object
2) Every update on the entity object will only impact entity, and caller need invoke getDBObject to get the db entity info. The save will automatically convert entity object to db object and save to the db.
3) We need covert the db object to platform entity from  the load call
4) DB object can also support DateTime from JodaTime as we use MongoTemplate to save the object now
3. Cache bug fix during the load: 
1) load the object from cache
2) If cache has the result return, we will skip db
3) If cache cannot find match, we will go to db and search for it. After a match found, update the cache as well
4. Cache bug fix for the user email existence check:
1) Check the email in the cache. If find a match, return the result immediately
2) If cache cannot find the record, we still need go to db to make sure the email is not used
5. Mongodb Load ID fix: Mongotemplate will return the id for the record so that we need reset the object id under the MongoDBProvider instead of BulkOperation


1. Entities: It contains all the platform entities (I only finish the basic stuff so far)
1) EntityObject: Base class for all the entities whose information needs to be saved
2) OrderObject: Not Completely done half way
3) PostComment: Entity Object for the post comment. 
4) PostObject: Entity Object for the Post. 
5) RecurEventInfo: Did not touch so far (Please ignore it)
6) UserObject: To hold all user related information

2. Enums: Hold all enums needs for the platform object. All the enum will have both db and api values. 
1) DMLEvents: CRUD activities
2) PostStatus: Open, Close, Expire, Removed
3) TimeUnit: Half done but need more change based on RecurEventInfo

3. main_platform: Please ignore this for now. It was for old framework.

4. Mongodb.entities: It contains all the reflectionDbObject for all platform entities  (I only finish the basic stuff so far)
1) DBEntityObject: Base class for all the db representation of platform entities
2) DBOrderObject: Not complete
3) DBPostComment: PostComment db representation. UserObject and Parent post information are all in reference id instead of the whole object.
4) DBPostObject: PostObject db representation. UserObject and other entity information is delegated to reference id instead of the whole object. We will do the lazy load.
5) DBUserObject: UserObject db representation.

5. Adapters: It has all the DB related information
1) DatabaseProvider: The interface for the DB operations. In the future, we can change it to other DB tools.
2) MongoDbProvider: Implementation of DatabaseProvider for mongo db. It includes CRUD operations. It meets the basic requirement, but still need:
	a) Bulk support for some function
	b) Transaction add
	c) Lock (I think mongo db did it automatically but need double check)
3) DBContext: Platform DB caller
4) IDBContext: Interface for the platform db adapter

6. func: Platform operations information
1) BulkEntityOperations: Platform to do the bulk save, load... etc. It will call the DmlOperationWrapper and DmlValidationHandler to finish the work.
2) DmlOperationWrapper: Hold the information for the DMLValidation result, and return the correct set of information to the caller. For example, the valid entity set from the input.
3) DmlValidationHandler: Valid the entities before doing the real db work so that we can fail fast.

7. Relationships: Hold the relationship information between entities. It is not done, and will make the changes.

8. Transhbin: Contain all old framework information which I did not plan to use any more.

9. Cache: Management of the cache so that we will reduce the number of db access
1) CacheManager: The interface of the cache system. It lists the major functions the cache provider need support.
2) RedisProvider: The Redis implementation of the cache service. 
Will add session management in the future.
3) AbstractBaseRedisDao: A simple implementation of the redis service management
4) RedisService: Deprecated redise support for the cache
5) RedisClientTemplate: The redis template to encapsulate the multil-server operations, transactions
6) RedisDataSourceCacheManager: Implements the cache management for the Redis with multiple client pool supported
7) RedisDataSource & Impl: Interface for the shared redis management 

10. Utilities: All the methods can be used cross board

11. Mongodb.Dao and Mongodb.repositories: @Deprecated 